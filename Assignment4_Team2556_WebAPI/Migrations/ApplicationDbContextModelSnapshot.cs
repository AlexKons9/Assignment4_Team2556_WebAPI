// <auto-generated />
using System;
using Assignment4_Team2556_WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment4Team2556WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateId"));

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfResidence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LandlineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoIdType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PhotoIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            CandidateId = 1,
                            AddressLine = "Korai 5",
                            AddressLine2 = "2nd Floor",
                            BirthDate = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Athens",
                            CountryOfResidence = "Greece",
                            Email = "alex@alex.com",
                            FirstName = "Alexandros",
                            Gender = "Male",
                            LandlineNumber = "+302109090999",
                            LastName = "Lepeniotis",
                            MiddleName = "Nikolaos",
                            MobileNumber = "+306912345678",
                            NativeLanguage = "Greek",
                            PhotoIdNumber = "AA 123456",
                            PhotoIdType = "National Id",
                            PhotoIssueDate = new DateTime(2009, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostalCode = "12345",
                            Province = "Attiki"
                        },
                        new
                        {
                            CandidateId = 2,
                            AddressLine = "Axeloou 7",
                            AddressLine2 = "Ground Floor",
                            BirthDate = new DateTime(1998, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Kalamaria",
                            CountryOfResidence = "Greece",
                            Email = "mpa@mpampis.com",
                            FirstName = "Mpampis",
                            Gender = "Male",
                            LandlineNumber = "+30231009090",
                            LastName = "Papadimitriou",
                            MobileNumber = "+306912345678",
                            NativeLanguage = "Greek",
                            PhotoIdNumber = "AB 999999",
                            PhotoIdType = "National Id",
                            PhotoIssueDate = new DateTime(2015, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostalCode = "12345",
                            Province = "Thessaloniki"
                        },
                        new
                        {
                            CandidateId = 3,
                            AddressLine = "Pentelis 2",
                            AddressLine2 = "4th Floor",
                            BirthDate = new DateTime(1980, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Athens",
                            CountryOfResidence = "Greece",
                            Email = "kostas@kostopoulos.com",
                            FirstName = "Kostas",
                            Gender = "Male",
                            LandlineNumber = "+302108888888",
                            LastName = "Kostopoulos",
                            MobileNumber = "+306945454545",
                            NativeLanguage = "Greek",
                            PhotoIdNumber = "AH 111111",
                            PhotoIdType = "National Id",
                            PhotoIssueDate = new DateTime(2015, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostalCode = "54321",
                            Province = "Attiki"
                        },
                        new
                        {
                            CandidateId = 4,
                            AddressLine = "Markou Mpotsari 67",
                            AddressLine2 = "1st Floor",
                            BirthDate = new DateTime(1972, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Athens",
                            CountryOfResidence = "Greece",
                            Email = "maria-eleni@papadopoulou.com",
                            FirstName = "Maria",
                            Gender = "Female",
                            LandlineNumber = "+3021000000",
                            LastName = "Papadopoulou",
                            MiddleName = "Eleni",
                            MobileNumber = "+306989898809",
                            NativeLanguage = "Greek",
                            PhotoIdNumber = "AHQ4567FG",
                            PhotoIdType = "Passport",
                            PhotoIssueDate = new DateTime(2022, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostalCode = "23456",
                            Province = "Attiki"
                        });
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.CandidateCertificate", b =>
                {
                    b.Property<int>("CandidateCertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateCertificateId"));

                    b.Property<int>("CandidateExamId")
                        .HasColumnType("int");

                    b.HasKey("CandidateCertificateId");

                    b.HasIndex("CandidateExamId");

                    b.ToTable("CandidateCertificates");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.CandidateExam", b =>
                {
                    b.Property<int>("CandidateExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateExamId"));

                    b.Property<string>("AssessmentTestCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("ExamScore")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NumberOfAwardedMarks")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfPossibleMakrs")
                        .HasColumnType("int");

                    b.Property<string>("PercentageScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScoreReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestResult")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateExamId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ExamId");

                    b.ToTable("CandidateExams");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.CandidateExamAnswer", b =>
                {
                    b.Property<int>("CandidateExamAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateExamAnswerId"));

                    b.Property<int>("CandidateExamId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("CandidateExamAnswerId");

                    b.HasIndex("CandidateExamId");

                    b.HasIndex("OptionId");

                    b.ToTable("CandidateExamAnswers");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificateId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            CertificateId = 1,
                            IsActive = true,
                            Title = "Java Foundation"
                        },
                        new
                        {
                            CertificateId = 2,
                            IsActive = true,
                            Title = "Java Advanced"
                        },
                        new
                        {
                            CertificateId = 3,
                            IsActive = false,
                            Title = "C# Foundation"
                        },
                        new
                        {
                            CertificateId = 4,
                            IsActive = false,
                            Title = "C# Advanced"
                        },
                        new
                        {
                            CertificateId = 5,
                            IsActive = false,
                            Title = "Javascript Foundation"
                        },
                        new
                        {
                            CertificateId = 6,
                            IsActive = false,
                            Title = "Javascript Advanced"
                        },
                        new
                        {
                            CertificateId = 7,
                            IsActive = false,
                            Title = "C++"
                        });
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int>("MaximumScore")
                        .HasColumnType("int");

                    b.Property<int>("PassMark")
                        .HasColumnType("int");

                    b.HasKey("ExamId");

                    b.HasIndex("CertificateId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            ExamId = 1,
                            CertificateId = 1,
                            MaximumScore = 3,
                            PassMark = 2
                        },
                        new
                        {
                            ExamId = 2,
                            CertificateId = 1,
                            MaximumScore = 3,
                            PassMark = 2
                        },
                        new
                        {
                            ExamId = 3,
                            CertificateId = 2,
                            MaximumScore = 3,
                            PassMark = 2
                        },
                        new
                        {
                            ExamId = 4,
                            CertificateId = 2,
                            MaximumScore = 3,
                            PassMark = 2
                        });
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.ExamQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamQuestions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            ExamId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            ExamId = 1
                        },
                        new
                        {
                            QuestionId = 3,
                            ExamId = 1
                        },
                        new
                        {
                            QuestionId = 4,
                            ExamId = 2
                        },
                        new
                        {
                            QuestionId = 5,
                            ExamId = 2
                        },
                        new
                        {
                            QuestionId = 6,
                            ExamId = 2
                        },
                        new
                        {
                            QuestionId = 7,
                            ExamId = 3
                        },
                        new
                        {
                            QuestionId = 8,
                            ExamId = 3
                        },
                        new
                        {
                            QuestionId = 9,
                            ExamId = 3
                        },
                        new
                        {
                            QuestionId = 10,
                            ExamId = 4
                        },
                        new
                        {
                            QuestionId = 11,
                            ExamId = 4
                        },
                        new
                        {
                            QuestionId = 12,
                            ExamId = 4
                        });
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            OptionId = 1,
                            Description = "AnswerA_T",
                            IsCorrect = true,
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 2,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 3,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 4,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            OptionId = 5,
                            Description = "AnswerA_T",
                            IsCorrect = true,
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 6,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 7,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 8,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            OptionId = 9,
                            Description = "AnswerA_T",
                            IsCorrect = true,
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 10,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 11,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 12,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            OptionId = 13,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 14,
                            Description = "AnswerB_T",
                            IsCorrect = true,
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 15,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 16,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            OptionId = 17,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 18,
                            Description = "AnswerB_T",
                            IsCorrect = true,
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 19,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 20,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            OptionId = 21,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 22,
                            Description = "AnswerB_T",
                            IsCorrect = true,
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 23,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 24,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            OptionId = 25,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 26,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 27,
                            Description = "AnswerC_T",
                            IsCorrect = true,
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 28,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            OptionId = 29,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 30,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 31,
                            Description = "AnswerC_T",
                            IsCorrect = true,
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 32,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            OptionId = 33,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 34,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 35,
                            Description = "AnswerC_T",
                            IsCorrect = true,
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 36,
                            Description = "AnswerD",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            OptionId = 37,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 38,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 39,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 40,
                            Description = "AnswerD_T",
                            IsCorrect = true,
                            QuestionId = 10
                        },
                        new
                        {
                            OptionId = 41,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 42,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 43,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 44,
                            Description = "AnswerD_T",
                            IsCorrect = true,
                            QuestionId = 11
                        },
                        new
                        {
                            OptionId = 45,
                            Description = "AnswerA",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 46,
                            Description = "AnswerB",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 47,
                            Description = "AnswerC",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            OptionId = 48,
                            Description = "AnswerD_T",
                            IsCorrect = true,
                            QuestionId = 12
                        });
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("DescriptionStem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            DescriptionStem = "lorem1",
                            TopicId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            DescriptionStem = "lorem2",
                            TopicId = 1
                        },
                        new
                        {
                            QuestionId = 3,
                            DescriptionStem = "lorem3",
                            TopicId = 2
                        },
                        new
                        {
                            QuestionId = 4,
                            DescriptionStem = "lorem4",
                            TopicId = 1
                        },
                        new
                        {
                            QuestionId = 5,
                            DescriptionStem = "lorem5",
                            TopicId = 2
                        },
                        new
                        {
                            QuestionId = 6,
                            DescriptionStem = "lorem6",
                            TopicId = 2
                        },
                        new
                        {
                            QuestionId = 7,
                            DescriptionStem = "lorem",
                            TopicId = 3
                        },
                        new
                        {
                            QuestionId = 8,
                            DescriptionStem = "lorem",
                            TopicId = 3
                        },
                        new
                        {
                            QuestionId = 9,
                            DescriptionStem = "lorem",
                            TopicId = 4
                        },
                        new
                        {
                            QuestionId = 10,
                            DescriptionStem = "lorem",
                            TopicId = 3
                        },
                        new
                        {
                            QuestionId = 11,
                            DescriptionStem = "lorem",
                            TopicId = 4
                        },
                        new
                        {
                            QuestionId = 12,
                            DescriptionStem = "lorem",
                            TopicId = 4
                        });
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TopicId"));

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<string>("TopicDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.HasIndex("CertificateId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            TopicId = 1,
                            CertificateId = 1,
                            TopicDescription = "FrontEnd Java Foundation"
                        },
                        new
                        {
                            TopicId = 2,
                            CertificateId = 1,
                            TopicDescription = "BackEnd Java Foundation"
                        },
                        new
                        {
                            TopicId = 3,
                            CertificateId = 2,
                            TopicDescription = "FrontEnd Java Advanced"
                        },
                        new
                        {
                            TopicId = 4,
                            CertificateId = 2,
                            TopicDescription = "BackEnd Java Advanced"
                        },
                        new
                        {
                            TopicId = 5,
                            CertificateId = 3,
                            TopicDescription = "FrontEnd C# Foundation"
                        },
                        new
                        {
                            TopicId = 6,
                            CertificateId = 3,
                            TopicDescription = "BackEnd C# Foundation"
                        },
                        new
                        {
                            TopicId = 7,
                            CertificateId = 4,
                            TopicDescription = "FrontEnd C# Advanced"
                        },
                        new
                        {
                            TopicId = 8,
                            CertificateId = 4,
                            TopicDescription = "BacktEnd C# Advanced"
                        },
                        new
                        {
                            TopicId = 9,
                            CertificateId = 5,
                            TopicDescription = "FrontEnd Javascript Foundation"
                        },
                        new
                        {
                            TopicId = 10,
                            CertificateId = 5,
                            TopicDescription = "BackEnd Javascript Foundation"
                        },
                        new
                        {
                            TopicId = 11,
                            CertificateId = 6,
                            TopicDescription = "FrontEnd Javascript Advanced"
                        },
                        new
                        {
                            TopicId = 12,
                            CertificateId = 6,
                            TopicDescription = "BacktEnd Javascript Advanced"
                        });
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7dd11f69-d904-4e23-9854-6e07c39c1a62",
                            ConcurrencyStamp = "d1e819f2-f56b-4932-8563-93a2718714e8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b785db06-407a-4ce0-a450-6a5bb958f554",
                            ConcurrencyStamp = "faac27ea-dec0-4125-b7b9-e56a8ce6ccc2",
                            Name = "Candidate",
                            NormalizedName = "CANDIDATE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.CandidateCertificate", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.CandidateExam", "CandidateExam")
                        .WithMany()
                        .HasForeignKey("CandidateExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateExam");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.CandidateExam", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.CandidateExamAnswer", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.CandidateExam", "CandidateExam")
                        .WithMany("QA")
                        .HasForeignKey("CandidateExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateExam");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Exam", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.ExamQuestion", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Option", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Question", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Topic", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.Certificate", "Certificate")
                        .WithMany("Topics")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment4_Team2556_WebAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Assignment4_Team2556_WebAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.CandidateExam", b =>
                {
                    b.Navigation("QA");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Certificate", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Assignment4_Team2556_WebAPI.Models.Question", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
